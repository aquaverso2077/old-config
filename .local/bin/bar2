#!/bin/sh

# Separator
sep(){
echo -e ""
}

# ARCH UPD
upd(){
  upd="$(checkupdates | wc -l)"
  echo -e " $upd"
}

# HDD
hdd() {
 hdd="$(df -h | awk 'NR==6{print $4}')"
 echo -e " $hdd"
}

# VOL
vol(){
 vol=`amixer get Master | awk -F'[][]' 'END{ print $6 $2 }' | sed 's/on//g'`
 echo -e "ﭵ $vol" 
} 
 
bat(){
	for battery in /sys/class/power_supply/BAT?*; do
		# If non-first battery, print a space separator.
		[ -n "${capacity+x}" ] && printf " "
		# Sets up the status and capacity
		case "$(cat "$battery/status" 2>&1)" in
			"Full") status="" ;;
			"Discharging") status="" ;;
			"Charging") status="" ;;
			"Not charging") status="" ;;
			"Unknown") status="" ;;
			*) exit 1 ;;
		esac
		capacity="$(cat "$battery/capacity" 2>&1)"
		# Will make a warn variable if discharging and low
		[ "$status" = "" ] && [ "$capacity" -le 25 ] && warn=" "
		# Prints the info
		printf "%s%s%d%%" "$status" "$warn" "$capacity"; unset warn
	done && printf "\\n"
}

# DATE
dat(){
	date="$(date +"%H:%M"| sed 's/  / /g')"
	echo -e "$date"
}

# CPU temp
tmp(){
	sensors | awk '/Core 0/ {print "" $3}'
}

# CPU
cpu(){
	read cpu a b c previdle rest < /proc/stat
	prevtotal=$((a+b+c+previdle))
	sleep 0.5
	read cpu a b c idle rest < /proc/stat
	total=$((a+b+c+idle))
	cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
	echo -e " $cpu%"
}

# XKB
key(){
	kb="$(xkb-switch)" || exit 1
	echo " $kb"
}

# BRG
lit(){
	#lit="$(xbacklight | sed 's/\..*//g')"
	#echo " $lit%"
	lit="$(brightnessctl | grep -oP '[^()]+%')"
	echo " $lit"	
}

# MEM
mem(){
	mem="$(free -h | awk '/^Mem/ { print $3 }' | sed s/i//g)"
	echo -e " $mem"
}

# NET
nettrf(){
	
	update() {
		sum=0
		for arg; do
			read -r i < "$arg"
			sum=$(( sum + i ))
		done
		cache=${XDG_CACHE_HOME:-$HOME/.cache}/${1##*/}
		[ -f "$cache" ] && read -r old < "$cache" || old=0
		printf %d\\n "$sum" > "$cache"
		printf %d\\n $(( sum - old ))
	}

	rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
	tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)

#	printf "%4sB  %4sB\\n" $(numfmt --to=iec $rx) $(numfmt --to=iec $tx)	
	printf " %sB\\n" $(numfmt --to=iec $rx)	
}

while true; do
  xsetroot -name " $(sep) $(nettrf) $(sep) $(hdd) $(sep) $(cpu) $(sep) $(mem) $(sep) $(vol) $(sep) $(lit) $(sep) $(upd) $(sep) $(dat) $(sep) "
  sleep 0.2
done &
